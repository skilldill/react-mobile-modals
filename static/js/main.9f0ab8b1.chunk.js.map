{"version":3,"sources":["../../src/Modals/Modals.context.ts","../../src/Modals/Modals.provider.tsx","../../src/Modals/Modal.tsx","../../src/hooks/useTouch.tsx","../../src/Modals/Modals.hook.ts","App.tsx","index.tsx"],"names":["ModalsContext","createContext","modals","openModal","closeModal","Modal","props","children","index","close","show","onClose","direction","useState","handleClosing","setHandleClosing","animated","setAnimated","config","initialConfig","startX","startY","translateX","translateY","transition","stateStartX","setStateStartX","stateStartY","setStateStartY","stateTranslateX","setStateTranslateX","stateTranslateY","setStateTranslateY","stateTransition","setStateTransition","addTransitionAnimation","useCallback","transX","transY","delay","Promise","cb","timeout","setTimeout","resolve","promiseAnimation","clearTimeout","handleTouchStart","event","touches","clientX","clientY","handleTouchMove","diffY","handleTouchEnd","useTouch","classes","modalClasses","modalStyle","useMemo","zIndex","transform","window","onTouchEnd","translateTimeout","animatedTimeout","onTouchStart","onTouchMove","className","style","ModalsContextModeNames","ModalsProvider","setModals","mode","setMode","lastModal","openedModals","i","closed","React","modal","openDirection","key","values","value","useModals","useContext","ThridModal","onClick","SecondModal","component","FirstModal","MainWindow","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f0ab8b1.chunk.js","sourcesContent":["import { createContext, ReactNode } from \"react\";\n\nexport type ModalDirectionTypes = \"horizontal\" | \"vertical\"\n\nexport type ModalProps = {\n    component: ReactNode,\n    openDirection?: ModalDirectionTypes,\n    closed?: boolean\n}\n\nexport type ModalContextModel = {\n    modals: ModalProps[],\n    openModal: (modal: ModalProps) => void,\n    closeModal: () => void\n}\n\nexport const ModalsContext = createContext<ModalContextModel>({\n    modals: [],\n    openModal: () => {},\n    closeModal: () => {}\n});\n","import React, { FC, PropsWithChildren, useMemo, useState } from \"react\";\n\nimport modalClasses from \"../styles.module.css\";\nimport { ModalsContext, ModalProps } from \"./Modals.context\";\nimport { Modal } from \"./Modal\";\n\nenum ModalsContextModeNames {\n  close,\n  open,\n}\n\nexport const ModalsProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [modals, setModals] = useState<ModalProps[]>([]);\n  const [mode, setMode] = useState<ModalsContextModeNames>(\n    ModalsContextModeNames.open\n  );\n\n  const openModal = (modal: ModalProps) => {\n    setMode(ModalsContextModeNames.open);\n    setModals([...modals, modal]);\n  };\n\n  const closeModal = () => {\n    const lastModal = modals[modals.length - 1];\n    const openedModals = modals.filter(\n      (modal, i) => {\n        modal // TODO: for linter)\n        return i !== modals.length - 1\n      }\n    );\n\n    setModals([...openedModals, { ...lastModal, closed: true }]);\n\n    const timeout = setTimeout(() => {\n      setMode(ModalsContextModeNames.close);\n      setModals(openedModals);\n      clearTimeout(timeout);\n    }, 300);\n  };\n\n  const openedModals = useMemo(\n    () => (\n      <React.Fragment>\n        {!!modals.length &&\n          (modals as ModalProps[]).map((modal, i) => (\n            <Modal \n              show={i === modals.length - 1 &&\n                mode === ModalsContextModeNames.open &&\n                !modal.closed}\n              direction={modal.openDirection}\n              close={!!modal.closed}\n              index={i}\n              onClose={closeModal}\n              key={i}\n            >{modal.component}</Modal>\n          ))}\n      </React.Fragment>\n    ),\n    [modals, mode]\n  );\n\n  const values = {\n    modals,\n    openModal,\n    closeModal,\n  };\n\n  return (\n    <ModalsContext.Provider value={values}>\n      <div className={modalClasses['modals']}>\n        {children}\n        {openedModals}\n      </div>\n    </ModalsContext.Provider>\n  );\n};\n","import React, { CSSProperties, FC, PropsWithChildren, useMemo, useState } from \"react\";\n\nimport { useTouch } from \"../hooks\";\nimport modalClasses from \"../styles.module.css\";\nimport { ModalDirectionTypes } from \"./Modals.context\";\n\ntype ModalProps = {\n    index: number,\n    show: boolean,\n    close: boolean,\n    direction?: ModalDirectionTypes,\n    onClose: () => void\n}\n\nconst MIN_END_TOUCH = 60;\n\nconst MAX_TOUCH_LENGTH = 80;\n\nexport const Modal: FC<PropsWithChildren<ModalProps>> = (props) => {\n    const { children, index, close, show, onClose, direction } = props;\n    const [handleClosing, setHandleClosing] = useState(false);\n    const [animated, setAnimated] = useState(false);\n\n    const {\n        stateStartX,\n        stateTranslateX,\n        setStateStartX,\n        setStateTranslateX,\n\n        stateStartY,\n        stateTranslateY,\n        setStateStartY,\n        setStateTranslateY,\n\n        handleTouchStart,\n        handleTouchMove,\n        handleTouchEnd,\n    } = useTouch();\n\n    const openDirectionClass = !!direction ? modalClasses[`modal-show-${direction}`] : modalClasses['modal-show-horizontal'];\n    const classes = show ? `${modalClasses['modal']} ${openDirectionClass}` : modalClasses['modal'];\n\n    const modalStyle: CSSProperties = useMemo(() => {\n        if (handleClosing || close) {\n            return {\n                zIndex: 1000 + index,\n                transition: 'all .2s',\n                transform: direction === 'vertical' ? `translateY(${window.innerHeight}px)` : `translateX(${window.innerWidth}px)`\n            }\n        }\n        \n        // stateTranslateX - stateStartX > 0 чтобы не тянуть в обратную сторону\n        const transformStyle = direction === 'vertical' ? \n            { transform: stateStartY < MIN_END_TOUCH && stateTranslateY - stateStartY > 0 ? `translateY(${stateTranslateY}px)` : 'none' } : \n            { transform: stateStartX < MIN_END_TOUCH && stateTranslateX - stateStartX > 0 ? `translateX(${stateTranslateX}px)` : 'none' };\n\n        return {\n            zIndex: 1000 + index,\n            transition: animated ? 'all .2s' : 'none',\n            ...transformStyle\n        }\n    }, [direction, handleClosing, close, stateStartX, stateTranslateX, stateTranslateY, stateStartY, index])\n\n    const handleTouchEndVertical = () => {\n        const touchMoveLength = stateTranslateY - stateStartY;\n\n        if (stateStartY < MIN_END_TOUCH && touchMoveLength > MAX_TOUCH_LENGTH) {\n            setHandleClosing(true);\n            onClose();\n        } else {\n            setAnimated(true);\n\n            const translateTimeout = setTimeout(() => {\n                setStateStartY(0);\n                setStateTranslateY(0);\n                clearTimeout(translateTimeout);\n            }, 10);\n\n            const animatedTimeout = setTimeout(() => {\n                setAnimated(false);\n                clearTimeout(animatedTimeout);\n            }, 200)\n        }\n    }\n\n    const handleTouchEndHorizontal = () => {\n        const touchMoveLength = stateTranslateX - stateStartX;\n\n        if (stateStartX < MIN_END_TOUCH && touchMoveLength > MAX_TOUCH_LENGTH) {\n            setHandleClosing(true);\n            onClose();\n        } else {\n            setAnimated(true);\n\n            const translateTimeout = setTimeout(() => {\n                setStateStartX(0);\n                setStateTranslateX(0);\n                clearTimeout(translateTimeout);\n            }, 10);\n\n            const animatedTimeout = setTimeout(() => {\n                setAnimated(false);\n                clearTimeout(animatedTimeout);\n            }, 200)\n        }\n    }\n\n    const onTouchEnd = direction === 'vertical' ? handleTouchEndVertical : handleTouchEndHorizontal;\n\n    return (\n        <div\n            onTouchStart={handleTouchStart()}\n            onTouchMove={handleTouchMove()}\n            onTouchEnd={handleTouchEnd(onTouchEnd)}\n            className={classes}\n            style={modalStyle}\n        >\n            {children}\n        </div>\n    )\n}","import { useState, useCallback, TouchEvent } from \"react\";\n\ntype UseTouchConfigParams = {\n  startX?: number,\n  startY?: number,\n  translateX?: number,\n  translateY?: number,\n  transition?: boolean,\n}\n\nexport const useTouch = (config?: UseTouchConfigParams) => {\n  let initialConfig = { startX: 0, startY: 0, translateX: 0, translateY: 0, transition: false };\n  if (!!config) initialConfig = { ...initialConfig, ...config };\n  const { startX, startY, translateX, translateY, transition } = initialConfig;\n\n  const [stateStartX, setStateStartX] = useState(startX);\n  const [stateStartY, setStateStartY] = useState(startY);\n  const [stateTranslateX, setStateTranslateX] = useState(translateX);\n  const [stateTranslateY, setStateTranslateY] = useState(translateY);\n  const [stateTransition, setStateTransition] = useState(transition);\n\n  const addTransitionAnimation = useCallback((cb?: () => void, transX: number = translateX, transY: number = translateY, delay = 400) => {\n    const promiseAnimation = new Promise<NodeJS.Timeout>((resolve) => {\n      setStateTransition(true);\n        setStateTranslateY(transY);\n        setStateTranslateX(transX);\n\n        !!cb && cb();\n\n        const timeout = setTimeout(() => {\n            resolve(timeout);\n        }, delay);\n    })\n\n    promiseAnimation\n        .then((timeout) => {\n            clearTimeout(timeout);\n            setStateTransition(false);\n        })\n  }, [])\n\n  const handleTouchStart = useCallback((cb?: () => void) => (event: TouchEvent) => {\n    const { touches } = event;\n    const { clientX, clientY } = touches[0];\n\n    !!cb && cb();\n\n    setStateStartX(clientX);\n    setStateStartY(clientY);\n  }, [setStateStartX, setStateStartY])\n\n  const handleTouchMove = useCallback((cb?: () => void) => (event: TouchEvent) => {\n    const { touches } = event;\n    const { clientX, clientY } = touches[0];\n\n    const diffX = clientX - stateStartX;\n    const diffY = clientY - stateStartY;\n\n    setStateTranslateX(stateTranslateX + diffX);\n    setStateTranslateY(stateTranslateY + diffY);\n\n    !!cb && cb();\n  }, [stateStartX, stateStartY, setStateTranslateX, setStateTranslateY])\n\n  const handleTouchEnd = (cb?: () => void) => () => {\n    !!cb && cb();\n  }\n\n  return {\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    addTransitionAnimation,\n    \n    setStateTranslateX,\n    setStateTranslateY,\n    setStateTransition,\n\n    setStateStartX,\n    setStateStartY,\n\n    stateStartX,\n    stateStartY,\n    stateTranslateX,\n    stateTranslateY,\n    stateTransition\n  }\n}","import { useContext } from \"react\";\nimport { ModalsContext } from \"./Modals.context\";\n\n\nexport const useModals = () => {\n    const modals = useContext(ModalsContext);\n    return modals;\n}","import React from 'react';\nimport { ModalsProvider, useModals } from 'react-mobile-modals';\nimport 'react-mobile-modals/dist/index.css';\n\nimport './index.css';\n\nconst ThridModal = () => {\n  const { closeModal } = useModals();\n\n  return (\n    <div className='page page-blue'>\n      <button onClick={closeModal}>Back</button>\n    </div>\n  );\n};\n\nconst SecondModal = () => {\n  const { openModal } = useModals();\n\n  const openThridModal = () => openModal({ component: <ThridModal /> });\n\n  return (\n    <div className='page page-red'>\n      <button onClick={openThridModal}>Open thrid modal</button>\n    </div>\n  );\n};\n\nconst FirstModal = () => {\n  const { openModal } = useModals();\n\n  const openSecondModal = () =>\n    openModal({ component: <SecondModal />, openDirection: 'vertical' });\n\n  return (\n    <div className='page page-green'>\n      <button onClick={openSecondModal}>Open second modal</button>\n    </div>\n  );\n};\n\nconst MainWindow = () => {\n  const { openModal } = useModals();\n\n  const openFirstModal = () => openModal({ component: <FirstModal /> });\n\n  return (\n    <div className='page main'>\n      <button onClick={openFirstModal}>Open first modal</button>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <ModalsProvider>\n      <MainWindow />\n    </ModalsProvider>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}