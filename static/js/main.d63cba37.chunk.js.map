{"version":3,"sources":["../../src/Modals/Modals.provider.tsx","../../src/Modals/Modals.context.ts","../../src/Modals/Modal.tsx","../../src/hooks/useTouch.tsx","../../src/Modals/Modals.hook.ts","App.tsx","index.tsx"],"names":["ModalsContext","createContext","modals","openModal","closeModal","Modal","props","direction","useState","config","initialConfig","startX","startY","translateX","translateY","transition","addTransitionAnimation","useCallback","transX","transY","delay","promiseAnimation","Promise","resolve","setStateTransition","setStateTranslateY","setStateTranslateX","cb","timeout","setTimeout","clearTimeout","handleTouchStart","event","touches","clientY","setStateStartX","setStateStartY","handleTouchMove","diffY","stateTranslateX","clientX","stateTranslateY","stateStartX","stateStartY","handleTouchEnd","stateTransition","useTouch","openDirectionClass","modalClasses","classes","show","modalStyle","useMemo","handleClosing","zIndex","transform","window","innerWidth","transformStyle","animated","close","onTouchEnd","setHandleClosing","onClose","setAnimated","translateTimeout","animatedTimeout","onTouchStart","onTouchMove","className","style","ModalsContextModeNames","ModalsProvider","children","lastModal","openedModals","i","setModals","closed","setMode","React","mode","modal","openDirection","index","key","values","value","useModals","useContext","ThridModal","onClick","SecondModal","component","FirstModal","MainWindow","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d63cba37.chunk.js","sourcesContent":["import React, { FC, useMemo, useState } from \"react\";\n\nimport modalClasses from \"../styles.module.css\";\nimport { ModalsContext, ModalProps } from \"./Modals.context\";\nimport { Modal } from \"./Modal\";\n\nenum ModalsContextModeNames {\n  close,\n  open,\n}\n\nexport const ModalsProvider: FC = ({ children }) => {\n  const [modals, setModals] = useState<ModalProps[]>([]);\n  const [mode, setMode] = useState<ModalsContextModeNames>(\n    ModalsContextModeNames.open\n  );\n\n  const openModal = (modal: ModalProps) => {\n    setMode(ModalsContextModeNames.open);\n    setModals([...modals, modal]);\n  };\n\n  const closeModal = () => {\n    const lastModal = modals[modals.length - 1];\n    const openedModals = modals.filter(\n      (modal, i) => {\n        modal // TODO: for linter)\n        return i !== modals.length - 1\n      }\n    );\n\n    setModals([...openedModals, { ...lastModal, closed: true }]);\n\n    const timeout = setTimeout(() => {\n      setMode(ModalsContextModeNames.close);\n      setModals(openedModals);\n      clearTimeout(timeout);\n    }, 300);\n  };\n\n  const openedModals = useMemo(\n    () => (\n      <React.Fragment>\n        {!!modals.length &&\n          (modals as ModalProps[]).map((modal, i) => (\n            <Modal \n              show={i === modals.length - 1 &&\n                mode === ModalsContextModeNames.open &&\n                !modal.closed}\n              direction={modal.openDirection}\n              close={!!modal.closed}\n              index={i}\n              onClose={closeModal}\n              key={i}\n            >{modal.component}</Modal>\n          ))}\n      </React.Fragment>\n    ),\n    [modals, mode]\n  );\n\n  const values = {\n    modals,\n    openModal,\n    closeModal,\n  };\n\n  return (\n    <ModalsContext.Provider value={values}>\n      <div className={modalClasses['modals']}>\n        {children}\n        {openedModals}\n      </div>\n    </ModalsContext.Provider>\n  );\n};\n","import { createContext, ReactNode } from \"react\";\n\nexport type ModalDirectionTypes = \"horizontal\" | \"vertical\"\n\nexport interface ModalProps {\n    component: ReactNode,\n    openDirection?: ModalDirectionTypes,\n    closed?: boolean\n}\n\nexport interface ModalContextModel {\n    modals: ModalProps[],\n    openModal: (modal: ModalProps) => void,\n    closeModal: () => void\n}\n\nexport const ModalsContext = createContext<ModalContextModel>({\n    modals: [],\n    openModal: () => {},\n    closeModal: () => {}\n})","import React, { CSSProperties, FC, useMemo, useState } from \"react\";\n\nimport { useTouch } from \"../hooks\";\nimport modalClasses from \"../styles.module.css\";\nimport { ModalDirectionTypes } from \"./Modals.context\";\n\ninterface ModalProps {\n    index: number,\n    show: boolean,\n    close: boolean,\n    direction?: ModalDirectionTypes,\n    onClose: () => void\n}\n\nconst MIN_END_TOUCH = 60;\n\nconst MAX_TOUCH_LENGTH = 80;\n\nexport const Modal: FC<ModalProps> = (props) => {\n    const { children, index, close, show, onClose, direction } = props;\n    const [handleClosing, setHandleClosing] = useState(false);\n    const [animated, setAnimated] = useState(false);\n\n    const {\n        stateStartX,\n        stateTranslateX,\n        setStateStartX,\n        setStateTranslateX,\n\n        stateStartY,\n        stateTranslateY,\n        setStateStartY,\n        setStateTranslateY,\n\n        handleTouchStart,\n        handleTouchMove,\n        handleTouchEnd,\n    } = useTouch();\n\n    const openDirectionClass = !!direction ? modalClasses[`modal-show-${direction}`] : modalClasses['modal-show-horizontal'];\n    const classes = show ? `${modalClasses['modal']} ${openDirectionClass}` : modalClasses['modal'];\n\n    const modalStyle: CSSProperties = useMemo(() => {\n        if (handleClosing || close) {\n            return {\n                zIndex: 1000 + index,\n                transition: 'all .2s',\n                transform: direction === 'vertical' ? `translateY(${window.innerHeight}px)` : `translateX(${window.innerWidth}px)`\n            }\n        }\n        \n        // stateTranslateX - stateStartX > 0 чтобы не тянуть в обратную сторону\n        const transformStyle = direction === 'vertical' ? \n            { transform: stateStartY < MIN_END_TOUCH && stateTranslateY - stateStartY > 0 ? `translateY(${stateTranslateY}px)` : 'none' } : \n            { transform: stateStartX < MIN_END_TOUCH && stateTranslateX - stateStartX > 0 ? `translateX(${stateTranslateX}px)` : 'none' };\n\n        return {\n            zIndex: 1000 + index,\n            transition: animated ? 'all .2s' : 'none',\n            ...transformStyle\n        }\n    }, [direction, handleClosing, close, stateStartX, stateTranslateX, stateTranslateY, stateStartY, index])\n\n    const handleTouchEndVertical = () => {\n        const touchMoveLength = stateTranslateY - stateStartY;\n\n        if (stateStartY < MIN_END_TOUCH && touchMoveLength > MAX_TOUCH_LENGTH) {\n            setHandleClosing(true);\n            onClose();\n        } else {\n            setAnimated(true);\n\n            const translateTimeout = setTimeout(() => {\n                setStateStartY(0);\n                setStateTranslateY(0);\n                clearTimeout(translateTimeout);\n            }, 10);\n\n            const animatedTimeout = setTimeout(() => {\n                setAnimated(false);\n                clearTimeout(animatedTimeout);\n            }, 200)\n        }\n    }\n\n    const handleTouchEndHorizontal = () => {\n        const touchMoveLength = stateTranslateX - stateStartX;\n\n        if (stateStartX < MIN_END_TOUCH && touchMoveLength > MAX_TOUCH_LENGTH) {\n            setHandleClosing(true);\n            onClose();\n        } else {\n            setAnimated(true);\n\n            const translateTimeout = setTimeout(() => {\n                setStateStartX(0);\n                setStateTranslateX(0);\n                clearTimeout(translateTimeout);\n            }, 10);\n\n            const animatedTimeout = setTimeout(() => {\n                setAnimated(false);\n                clearTimeout(animatedTimeout);\n            }, 200)\n        }\n    }\n\n    const onTouchEnd = direction === 'vertical' ? handleTouchEndVertical : handleTouchEndHorizontal;\n\n    return (\n        <div\n            onTouchStart={handleTouchStart()}\n            onTouchMove={handleTouchMove()}\n            onTouchEnd={handleTouchEnd(onTouchEnd)}\n            className={classes}\n            style={modalStyle}\n        >\n            {children}\n        </div>\n    )\n}","import { useState, useCallback, TouchEvent } from \"react\";\n\ninterface useTouchConfig {\n  startX?: number,\n  startY?: number,\n  translateX?: number,\n  translateY?: number,\n  transition?: boolean,\n}\n\nexport const useTouch = (config?: useTouchConfig) => {\n  let initialConfig = { startX: 0, startY: 0, translateX: 0, translateY: 0, transition: false };\n  if (!!config) initialConfig = { ...initialConfig, ...config };\n  const { startX, startY, translateX, translateY, transition } = initialConfig;\n\n  const [stateStartX, setStateStartX] = useState(startX);\n  const [stateStartY, setStateStartY] = useState(startY);\n  const [stateTranslateX, setStateTranslateX] = useState(translateX);\n  const [stateTranslateY, setStateTranslateY] = useState(translateY);\n  const [stateTransition, setStateTransition] = useState(transition);\n\n  const addTransitionAnimation = useCallback((cb?: () => void, transX: number = translateX, transY: number = translateY, delay = 400) => {\n    const promiseAnimation = new Promise<NodeJS.Timeout>((resolve) => {\n      setStateTransition(true);\n        setStateTranslateY(transY);\n        setStateTranslateX(transX);\n\n        !!cb && cb();\n\n        const timeout = setTimeout(() => {\n            resolve(timeout);\n        }, delay);\n    })\n\n    promiseAnimation\n        .then((timeout) => {\n            clearTimeout(timeout);\n            setStateTransition(false);\n        })\n  }, [])\n\n  const handleTouchStart = useCallback((cb?: () => void) => (event: TouchEvent) => {\n    const { touches } = event;\n    const { clientX, clientY } = touches[0];\n\n    !!cb && cb();\n\n    setStateStartX(clientX);\n    setStateStartY(clientY);\n  }, [setStateStartX, setStateStartY])\n\n  const handleTouchMove = useCallback((cb?: () => void) => (event: TouchEvent) => {\n    const { touches } = event;\n    const { clientX, clientY } = touches[0];\n\n    const diffX = clientX - stateStartX;\n    const diffY = clientY - stateStartY;\n\n    setStateTranslateX(stateTranslateX + diffX);\n    setStateTranslateY(stateTranslateY + diffY);\n\n    !!cb && cb();\n  }, [stateStartX, stateStartY, setStateTranslateX, setStateTranslateY])\n\n  const handleTouchEnd = (cb?: () => void) => () => {\n    !!cb && cb();\n  }\n\n  return {\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    addTransitionAnimation,\n    \n    setStateTranslateX,\n    setStateTranslateY,\n    setStateTransition,\n\n    setStateStartX,\n    setStateStartY,\n\n    stateStartX,\n    stateStartY,\n    stateTranslateX,\n    stateTranslateY,\n    stateTransition\n  }\n}","import { useContext } from \"react\";\nimport { ModalsContext } from \"./Modals.context\";\n\n\nexport const useModals = () => {\n    const modals = useContext(ModalsContext);\n    return modals;\n}","import React from 'react';\nimport { ModalsProvider, useModals } from 'react-mobile-modals';\nimport \"react-mobile-modals/dist/index.css\";\n\nimport \"./index.css\";\n\nconst ThridModal = () => {\n  const { closeModal } = useModals();\n\n  return (\n    <div className=\"page page-blue\">\n      <button onClick={closeModal}>\n        Back\n      </button>\n    </div>\n  )\n}\n\nconst SecondModal = () => {\n  const { openModal } = useModals();\n\n  const openThridModal = () => openModal({ component: <ThridModal /> });\n\n  return (\n    <div className=\"page page-red\">\n      <button onClick={openThridModal}>\n        Open thrid modal\n      </button>\n    </div>  \n  )\n}\n\nconst FirstModal = () => {\n  const { openModal } = useModals();\n\n  const openSecondModal = () => openModal({ component: <SecondModal />, openDirection: 'vertical' });\n\n  return (\n    <div className=\"page page-green\">\n      <button onClick={openSecondModal}>\n        Open second modal\n      </button>\n    </div>  \n  )\n}\n\nconst MainWindow = () => {\n  const { openModal } = useModals();\n\n  const openFirstModal = () => openModal({ component: <FirstModal /> });\n\n  return (\n    <div className=\"page main\">\n      <button onClick={openFirstModal}>\n        Open first modal\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <ModalsProvider>\n      <MainWindow />\n    </ModalsProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}